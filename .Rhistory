data <- read.csv("./../../Output/LowPPMMatrix.csv")
data
data <- read.csv("./../../Output/LowPPMMatrix.csv")
data <- data[ , -c(8, 9)]
data
data <- read.csv("./../../Output/LowPPMMatrix.csv")
data <- data[ , -c(7, 8, 9)]
data
data <- read.csv("./../../Output/LowPPMMatrix.csv")
#data <- data[ , -c(7, 8, 9)]
data
knitr::opts_chunk$set(echo = TRUE)
logDetSigma <- -2 * sum(log(diag(chol(solve(A)))))
matrixRoot<- function( A, inv=TRUE){
hold<- eigen(A, symmetric=TRUE)
if( inv){
DHalf<- sqrt(1/hold$values)
}
else{
DHalf<- sqrt(hold$values)
}
hold$vectors%*%diag(DHalf)%*%t( hold$vectors)
}
set.seed(224)
aRange<- 3.5
M<- 100
s<- cbind( 1:M)
scaledD<- rdist( s,s)/aRange
suppressMessages(library( fields))
knitr::opts_chunk$set(echo = TRUE)
matrixRoot<- function( A, inv=TRUE){
hold<- eigen(A, symmetric=TRUE)
if( inv){
DHalf<- sqrt(1/hold$values)
}
else{
DHalf<- sqrt(hold$values)
}
hold$vectors%*%diag(DHalf)%*%t( hold$vectors)
}
set.seed(224)
aRange<- 3.5
M<- 100
s<- cbind( 1:M)
scaledD<- rdist( s,s)/aRange
A<- (1+ scaledD)* exp( - scaledD)
B<- matrixRoot(A, inv=FALSE)
f<- B%*%rnorm( M)
fHW07<- list(s=s, y=f)
Z<- fHW07$y
s<- fHW07$s
fit0<- spatialProcess( s,Z,
smoothness = 1.5,
mKrig.args = list( m=0)
)
fit0$beta
fit0$summary
lLike0<- fit0$summary["lnProfileLike.FULL"]
logDetSigma <- -2 * sum(log(diag(chol(solve(A)))))
N <- length(s)
mu <- 0
log_likelihood_hand <- - (N / 2) * log(2 * pi) - 0.5 * logDetSigma - 0.5 * t(Z) %*% solve(A) %*% Z
print(paste("Likelihood: ", log_likelihood_hand))
# thin plate spline
data <- read.csv("./../../Output/LowPPMMatrix.csv")
data <- data[ , -c(7, 8, 9)]
data$Target.PPM
data
# thin plate spline
data <- read.csv("./../../Output/LowPPMMatrix.csv")
data <- data[ , -c(7, 8, 9)]
data$Target.PPM <- data$Target.PPM + 4.21
data
library(ggplot2)
ggplot(data, aes(x = Resistance, y = Target.PPM)) +
geom_point() +
labs(title = "PPM vs Resistance", x = "Resistance", y = "Target PPM")
# Plot PPM vs Humidity
ggplot(data, aes(x = Humidity, y = Target.PPM)) +
geom_point() +
labs(title = "PPM vs Humidity", x = "Humidity", y = "Target PPM")
library(ggplot2)
ggplot(data, aes(x = Resistance, y = Target.PPM)) +
geom_point() +
labs(title = "PPM vs Resistance", x = "Resistance", y = "Target PPM")
# Plot PPM vs Humidity
ggplot(data, aes(x = RelativeHumidity, y = Target.PPM)) +
geom_point() +
labs(title = "PPM vs Humidity", x = "Humidity", y = "Target PPM")
# Plot PPM vs Temperature
ggplot(data, aes(x = Temperature, y = Target.PPM)) +
geom_point() +
labs(title = "PPM vs Temperature", x = "Temperature", y = "Target PPM")
library(ggplot2)
ggplot(data, aes(x = Resistance, y = Target.PPM)) +
geom_point() +
labs(title = "PPM vs Resistance", x = "Resistance", y = "Target PPM")
# Plot PPM vs Humidity
ggplot(data, aes(x = RelativeHumidity, y = Resistance)) +
geom_point() +
labs(title = "PPM vs Humidity", x = "Humidity", y = "Resistance")
# Plot PPM vs Temperature
ggplot(data, aes(x = Temperature, y = Resistance)) +
geom_point() +
labs(title = "PPM vs Temperature", x = "Temperature", y = "Resistance")
# Normalize the RelativeHumidity
data$NormalizedRelativeHumidity <- (data$RelativeHumidity - min(data$RelativeHumidity)) / (max(data$RelativeHumidity) - min(data$RelativeHumidity))
# Normalize the Resistance
data$NormalizedResistance <- (data$Resistance - min(data$Resistance)) / (max(data$Resistance) - min(data$Resistance))
# Normalize the Temperature
data$NormalizedTemperature <- (data$Temperature - min(data$Temperature)) / (max(data$Temperature) - min(data$Temperature))
# Normalize the RelativeHumidity
data$NormalizedRelativeHumidity <- (data$RelativeHumidity - min(data$RelativeHumidity)) / (max(data$RelativeHumidity) - min(data$RelativeHumidity))
# Normalize the Resistance
data$NormalizedResistance <- (data$Resistance - min(data$Resistance)) / (max(data$Resistance) - min(data$Resistance))
# Normalize the Temperature
data$NormalizedTemperature <- (data$Temperature - min(data$Temperature)) / (max(data$Temperature) - min(data$Temperature))
# Fit the linear regression model using the normalized predictors
model <- lm(Target.PPM ~ NormalizedRelativeHumidity + NormalizedResistance + NormalizedTemperature, data=data)
# Get a summary of the model
summary(model)
# Fit the linear regression model using the normalized predictors
model <- lm(ln(Target.PPM) ~ NormalizedRelativeHumidity + NormalizedResistance + NormalizedTemperature, data=data)
# Fit the linear regression model using the normalized predictors
model <- lm(log(Target.PPM) ~ NormalizedRelativeHumidity + NormalizedResistance + NormalizedTemperature, data=data)
# Get a summary of the model
summary(model)
# Fit the linear regression model using the normalized predictors
model <- lm(log(Target.PPM) ~ Resistance + RelativeHumidity  + Temperature, data=data)
# Get a summary of the model
summary(model)
# Fit the linear regression model using the normalized predictors
model <- lm(log(Target.PPM) ~ Resistance + RelativeHumidity  + Temperature, data=data)
# Get a summary of the model
summary(model)
# Fit the linear regression model using the normalized predictors
model <- lm(log(Target.PPM) ~ Resistance + RelativeHumidity  + Temperature + Resistance*RelativeHumidity, data=data)
# Get a summary of the model
summary(model)
# Fit the linear regression model using the normalized predictors
model <- lm(log(Target.PPM) ~ Resistance + RelativeHumidity  + Temperature + Resistance*RelativeHumidity + Resistance*Temperature, data=data)
# Get a summary of the model
summary(model)
# Fit the linear regression model using the normalized predictors
model <- lm(log(Target.PPM) ~ Resistance + RelativeHumidity + Temperature + Resistance*RelativeHumidity + Resistance*Temperature + RelativeHumidity * Temperature, data=data)
# Get a summary of the model
summary(model)
# Predict the log-transformed Target PPM using the model
predicted_log_values <- predict(model)
# Back-transform from the log scale to the PPM scale
predicted_values <- exp(predicted_log_values)
actual_values <- data$Target.PPM
# Calculate the residuals on the original PPM scale
residuals_ppm <- actual_values - predicted_values
# Calculate the RMSE on the original PPM scale
rmse_ppm <- sqrt(mean(residuals_ppm^2))
# Predict the log-transformed Target PPM using the model
predicted_log_values <- predict(model)
# Back-transform from the log scale to the PPM scale
predicted_values <- exp(predicted_log_values)
actual_values <- data$Target.PPM
# Calculate the residuals on the original PPM scale
residuals_ppm <- actual_values - predicted_values
# Calculate the RMSE on the original PPM scale
rmse_ppm <- sqrt(mean(residuals_ppm^2))
rmse_ppm
# Fit the linear regression model using the normalized predictors
model <- lm(log(Target.PPM) ~ Resistance + RelativeHumidity + Temperature + Resistance*RelativeHumidity + Resistance*Temperature + Resistance*RelativeHumidity*Temperature, data=data)
# Get a summary of the model
summary(model)
# Predict the log-transformed Target PPM using the model
predicted_log_values <- predict(model)
# Back-transform from the log scale to the PPM scale
predicted_values <- exp(predicted_log_values)
actual_values <- data$Target.PPM
# Calculate the residuals on the original PPM scale
residuals_ppm <- actual_values - predicted_values
# Calculate the RMSE on the original PPM scale
rmse_ppm <- sqrt(mean(residuals_ppm^2))
rmse_ppm
# Fit the linear regression model using the normalized predictors
model <- lm(log(Target.PPM) ~ Resistance + RelativeHumidity + Temperature + Resistance*RelativeHumidity + Resistance*Temperature + Resistance*RelativeHumidity*Temperature, data=data)
# Get a summary of the model
summary(model)
plot(model)
# thin plate spline
data <- read.csv("./Output/LowPPMMatrix.csv")
